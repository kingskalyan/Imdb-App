// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestApi.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProducerResourceFeature : object, Xunit.IClassFixture<ProducerResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Producer.feature"
#line hidden
        
        public ProducerResourceFeature(ProducerResourceFeature.FixtureData fixtureData, RestApi_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Producer Resource", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Producer All")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Resource")]
        [Xunit.TraitAttribute("Description", "Get Producer All")]
        [Xunit.TraitAttribute("Category", "GetProducer")]
        public void GetProducerAll()
        {
            string[] tagsOfScenario = new string[] {
                    "GetProducer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Producer All", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I make Get Request \'api/Producers/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And(@"response data must look like '[{""id"":1,""name"":""S.S. Rajamouli"",""bio"":""S.S. Rajamouli is an Indian film director and screenwriter who primarily works in Telugu cinema and is known for his action, fantasy, and epic genre films. He is the highest grossing Indian director of all time and the highest-paid director in India. "",""dateOfBirth"":""1973-10-20T00:00:00"",""gender"":""Male""}]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get By Id of Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Resource")]
        [Xunit.TraitAttribute("Description", "Get By Id of Producer")]
        [Xunit.TraitAttribute("Category", "GetByProducerId")]
        [Xunit.InlineDataAttribute("1", "200", new string[0])]
        [Xunit.InlineDataAttribute("9", "404", new string[0])]
        public void GetByIdOfProducer(string id, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetByProducerId"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("status code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get By Id of Producer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When(string.Format("I make Get Request with \'{0}\' and \'api/Producers/\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add an Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Resource")]
        [Xunit.TraitAttribute("Description", "Add an Producer")]
        [Xunit.TraitAttribute("Category", "PostProducer")]
        [Xunit.InlineDataAttribute(@"{ ""name"": ""James Cameron"", ""bio"": ""James Cameron is a Canadian filmmaker, director, producer, screenwriter, and environmentalist. He is known for directing the films Titanic, Avatar, and Terminator 2: Judgment Day."", ""dateOfBirth"": ""1954-08-16"", ""gender"": ""Male"" }", "201", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": , \"bio\": \"James Cameron is a Canadian filmmaker, director, producer, scr" +
            "eenwriter, and environmentalist. He is known for directing the films Titanic, Av" +
            "atar, and Terminator 2: Judgment Day.\", \"dateOfBirth\": \"1954-08-16\", \"gender\": \"" +
            "Male\" }", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"James Cameron\", \"bio\": , \"dateOfBirth\": \"1954-08-16\", \"gender\": \"Male\" " +
            "}", "400", new string[0])]
        [Xunit.InlineDataAttribute("{\"name\": \"James Cameron\", \"bio\": \"James Cameron is a Canadian filmmaker, director" +
            ", producer, screenwriter, and environmentalist. He is known for directing the fi" +
            "lms Titanic, Avatar, and Terminator 2: Judgment Day.\", \"dateOfBirth\": , \"gender\"" +
            ": \"Male\" }", "400", new string[0])]
        [Xunit.InlineDataAttribute(@"{""name"": ""James Cameron"", ""bio"": ""James Cameron is a Canadian filmmaker, director, producer, screenwriter, and environmentalist. He is known for directing the films Titanic, Avatar, and Terminator 2: Judgment Day."", ""dateOfBirth"": ""1954-08-16"", ""gender"":  }", "400", new string[0])]
        public void AddAnProducer(string producer, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PostProducer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Producer", producer);
            argumentsOfScenario.Add("status code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an Producer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.When(string.Format("I make Post Request with \'{0}\' and \'api/Producers/\'", producer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update an Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Resource")]
        [Xunit.TraitAttribute("Description", "Update an Producer")]
        [Xunit.TraitAttribute("Category", "UpdateProducer")]
        [Xunit.InlineDataAttribute("1", @"{""name"": ""James Cameron"", ""bio"": ""James Cameron is a Canadian filmmaker, director, producer, screenwriter, and environmentalist. He is known for directing the films Titanic, Avatar, and Terminator 2: Judgment Day."", ""dateOfBirth"": ""1955-08-16"", ""gender"": ""Male"" }", "200", new string[0])]
        [Xunit.InlineDataAttribute("1", "{\"name\": , \"bio\": \"James Cameron is a Canadian filmmaker, director, producer, scr" +
            "eenwriter, and environmentalist. He is known for directing the films Titanic, Av" +
            "atar, and Terminator 2: Judgment Day.\", \"dateOfBirth\": \"1955-08-16\", \"gender\": \"" +
            "Male\" }", "400", new string[0])]
        [Xunit.InlineDataAttribute("1", "{name\": \"James Cameron\", \"bio\": , \"dateOfBirth\": \"1955-08-16\", \"gender\": \"Male\" }" +
            "", "400", new string[0])]
        [Xunit.InlineDataAttribute("1", "{name\": \"James Cameron\", \"bio\": \"James Cameron is a Canadian filmmaker, director," +
            " producer, screenwriter, and environmentalist. He is known for directing the fil" +
            "ms Titanic, Avatar, and Terminator 2: Judgment Day.\", \"dateOfBirth\": , \"gender\":" +
            " \"Male\" }", "400", new string[0])]
        [Xunit.InlineDataAttribute("1", @"{""name"": ""James Cameron"", ""bio"": ""James Cameron is a Canadian filmmaker, director, producer, screenwriter, and environmentalist. He is known for directing the films Titanic, Avatar, and Terminator 2: Judgment Day."", ""dateOfBirth"": ""1955-08-16"", ""gender"":  }", "400", new string[0])]
        [Xunit.InlineDataAttribute("2", @"{""name"": ""James Cameron"", ""bio"": ""James Cameron is a Canadian filmmaker, director, producer, screenwriter, and environmentalist. He is known for directing the films Titanic, Avatar, and Terminator 2: Judgment Day."", ""dateOfBirth"": ""1955-08-16"", ""gender"": ""Male"" }", "404", new string[0])]
        public void UpdateAnProducer(string id, string producer, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UpdateProducer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("Producer", producer);
            argumentsOfScenario.Add("status code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an Producer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When(string.Format("I make Update Request with \'{0}\' , \'{1}\' and \'api/Producers/\'", producer, id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete an Producer")]
        [Xunit.TraitAttribute("FeatureTitle", "Producer Resource")]
        [Xunit.TraitAttribute("Description", "Delete an Producer")]
        [Xunit.TraitAttribute("Category", "DeleteProducer")]
        [Xunit.InlineDataAttribute("1", "200", new string[0])]
        [Xunit.InlineDataAttribute("9", "404", new string[0])]
        public void DeleteAnProducer(string id, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DeleteProducer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("status code", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an Producer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.When(string.Format("I make Delete Request with \'{0}\' and \'api/Producers/\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProducerResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProducerResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
